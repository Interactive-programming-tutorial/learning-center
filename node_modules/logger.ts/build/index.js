class Logger {
    constructor() {
        this.chalk = require('chalk');
        this.wrap = require('wordwrap');
        this.types = {
            debug: this.chalk.gray,
            success: this.chalk.green,
            error: this.chalk.red,
            warning: this.chalk.yellow,
            info: this.chalk.cyan,
            usage: this.chalk.blue,
            default: this.chalk.white
        };
    }
    fixTime(t) {
        return t < 10 ? '0' + t : '' + t;
    }
    prettyTime() {
        const chalk = this.chalk;
        const date = new Date();
        var hours = this.fixTime(date.getHours());
        var minutes = this.fixTime(date.getMinutes());
        var seconds = this.fixTime(date.getSeconds());
        var start = chalk.white('[');
        var end = chalk.white(']');
        var split = chalk.cyan(':');
        return start + chalk.yellow(hours) + split + chalk.yellow(minutes) + split + chalk.yellow(seconds) + end;
    }
    format(data, type) {
        const wrap = this.wrap;
        const color = this.types[type];
        var result = '';
        var splitted = '';
        var split = [];
        var config = {
            terminal: {
                width: process.stdout.columns,
                height: process.stdout.rows
            },
            width: 3,
            time: this.prettyTime()
        };
        const line = {
            start: ' ' + this.chalk.inverse(color(' ')) + ' ',
            end: config.time + ' ' + color(type.toUpperCase()),
        };
        splitted = wrap(0, config.terminal.width)(data);
        if (splitted.indexOf('\n') !== -1)
            split = [splitted];
        else
            split = splitted.split('\n');
        result += line.start + line.end;
        for (var i = 0; i < split.length; i++)
            result += '\n' + line.start + color(split[i]);
        return '\n' + result;
    }
    debug(data) {
        console.log(this.format(data, 'debug'));
    }
    success(data) {
        console.log(this.format(data, 'success'));
    }
    error(data) {
        console.log(this.format(data, 'error'));
    }
    warning(data) {
        console.log(this.format(data, 'warning'));
    }
    info(data) {
        console.log(this.format(data, 'info'));
    }
    usage(data) {
        console.log(this.format(data, 'usage'));
    }
    log(data) {
        console.log(this.format(data, 'default'));
    }
    default(data) {
        console.log(this.format(data, 'default'));
    }
}
module.exports = new Logger();
//# sourceMappingURL=index.js.map